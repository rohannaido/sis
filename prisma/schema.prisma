// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique
  token         String?
  password      String?
  role          String?
  Student       Student[]
  Teacher       Teacher[]
  BookBorrowing BookBorrow[]
}

model Student {
  id           Int        @id @default(autoincrement())
  userId       String
  user         User       @relation(fields: [userId], references: [id])
  classGradeId Int
  classGrade   ClassGrade @relation(fields: [classGradeId], references: [id])
  sectionId    Int
  section      Section    @relation(fields: [sectionId], references: [id])
}

model Teacher {
  id                           Int                            @id @default(autoincrement())
  userId                       String
  user                         User                           @relation(fields: [userId], references: [id])
  TeacherClassGradeSubjectLink TeacherClassGradeSubjectLink[]
  TimeTable                    TimeTable[]
  SectionSubjectTeacher        SectionSubjectTeacher[]
}

model TeacherClassGradeSubjectLink {
  id           Int        @id @default(autoincrement())
  teacherId    Int
  teacher      Teacher    @relation(fields: [teacherId], references: [id])
  classGradeId Int
  classGrade   ClassGrade @relation(fields: [classGradeId], references: [id])
  subjectId    Int
  subject      Subject    @relation(fields: [subjectId], references: [id])
}

model ClassGrade {
  id                           Int                            @id @default(autoincrement())
  title                        String
  slotsGroupId                 Int?
  SlotsGroup                   SlotsGroup?                    @relation(fields: [slotsGroupId], references: [id])
  Subject                      Subject[]
  Section                      Section[]
  Student                      Student[]
  TeacherClassGradeSubjectLink TeacherClassGradeSubjectLink[]

  TimeTable TimeTable[]
}

model Subject {
  id                 Int        @id @default(autoincrement())
  classGradeId       Int
  classGrade         ClassGrade @relation(fields: [classGradeId], references: [id])
  periodCountPerWeek Int        @default(0)
  name               String?

  Chapter                      Chapter[]
  TeacherClassGradeSubjectLink TeacherClassGradeSubjectLink[]
  TimeTable                    TimeTable[]
  SectionSubjectTeacher        SectionSubjectTeacher[]
}

model Section {
  id                    Int                     @id @default(autoincrement())
  classGradeId          Int
  classGrade            ClassGrade              @relation(fields: [classGradeId], references: [id])
  name                  String?
  Student               Student[]
  TimeTable             TimeTable[]
  SectionSubjectTeacher SectionSubjectTeacher[]
}

model Chapter {
  id        Int     @id @default(autoincrement())
  name      String
  subjectId Int
  subject   Subject @relation(fields: [subjectId], references: [id])

  ChapterContent ChapterContent[]
}

model ChapterContent {
  id        Int     @id @default(autoincrement())
  chapterId Int
  chapter   Chapter @relation(fields: [chapterId], references: [id])
  name      String
  type      String
  url       String?
}

model SlotsGroup {
  id         Int          @id @default(autoincrement())
  name       String
  Slots      Slots[]
  ClassGrade ClassGrade[]
  TimeTable  TimeTable[]
}

model Slots {
  id          Int         @id @default(autoincrement())
  slotGroupId Int
  slotGroup   SlotsGroup  @relation(fields: [slotGroupId], references: [id])
  slotNumber  Int
  dayOfWeek   String
  startTime   String
  endTime     String
  type        String
  TimeTable   TimeTable[]
}

model SectionSubjectTeacher {
  id        Int     @id @default(autoincrement())
  sectionId Int
  section   Section @relation(fields: [sectionId], references: [id])
  subjectId Int
  subject   Subject @relation(fields: [subjectId], references: [id])
  teacherId Int
  teacher   Teacher @relation(fields: [teacherId], references: [id])
}

model TimeTableGroup {
  id Int @id @default(autoincrement())

  TimeTable TimeTable[]
}

model TimeTable {
  id               Int            @id @default(autoincrement())
  timeTableGroupId Int
  timeTableGroup   TimeTableGroup @relation(fields: [timeTableGroupId], references: [id])
  classGradeId     Int
  classGrade       ClassGrade     @relation(fields: [classGradeId], references: [id])
  sectionId        Int
  section          Section        @relation(fields: [sectionId], references: [id])
  slotsGroupId     Int
  slotsGroup       SlotsGroup     @relation(fields: [slotsGroupId], references: [id])
  dayOfWeek        String
  slotsId          Int
  slots            Slots          @relation(fields: [slotsId], references: [id])
  subjectId        Int?
  subject          Subject?       @relation(fields: [subjectId], references: [id])
  teacherId        Int?
  teacher          Teacher?       @relation(fields: [teacherId], references: [id])
}

model Book {
  id         Int          @id @default(autoincrement())
  title      String
  author     String
  bookBorrow BookBorrow[]
  copies     Int          @default(0)
}

model BookBorrow {
  id         Int       @id @default(autoincrement())
  bookId     Int
  book       Book      @relation(fields: [bookId], references: [id])
  userId     String
  user       User      @relation(fields: [userId], references: [id])
  lendDate   DateTime  @default(now())
  returnDate DateTime?
}
