// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String    @id @default(cuid())
  name     String?
  email    String?   @unique
  token    String?
  password String?
  role     String?
  Student  Student[]
  Teacher  Teacher[]
}

model Student {
  id           Int        @id @default(autoincrement())
  userId       String
  user         User       @relation(fields: [userId], references: [id])
  classGradeId Int
  classGrade   ClassGrade @relation(fields: [classGradeId], references: [id])
  sectionId    Int
  section      Section    @relation(fields: [sectionId], references: [id])
}

model Teacher {
  id                           Int                            @id @default(autoincrement())
  userId                       String
  user                         User                           @relation(fields: [userId], references: [id])
  TeacherClassGradeSubjectLink TeacherClassGradeSubjectLink[]
}

model TeacherClassGradeSubjectLink {
  id           Int        @id @default(autoincrement())
  teacherId    Int
  teacher      Teacher    @relation(fields: [teacherId], references: [id])
  classGradeId Int
  classGrade   ClassGrade @relation(fields: [classGradeId], references: [id])
  subjectId    Int
  subject      Subject    @relation(fields: [subjectId], references: [id])
}

model ClassGrade {
  id                           Int                            @id @default(autoincrement())
  title                        String
  slotsGroupId                 Int?
  slotsGroup                   SlotsGroup?                    @relation(fields: [slotsGroupId], references: [id])
  Subject                      Subject[]
  Section                      Section[]
  Student                      Student[]
  TeacherClassGradeSubjectLink TeacherClassGradeSubjectLink[]
}

model Subject {
  id                 Int        @id @default(autoincrement())
  classGradeId       Int
  classGrade         ClassGrade @relation(fields: [classGradeId], references: [id])
  periodCountPerWeek Int        @default(0)
  name               String?

  Chapter                      Chapter[]
  TeacherClassGradeSubjectLink TeacherClassGradeSubjectLink[]
}

model Section {
  id           Int        @id @default(autoincrement())
  classGradeId Int
  classGrade   ClassGrade @relation(fields: [classGradeId], references: [id])
  name         String?
  Student      Student[]
}

model Chapter {
  id        Int     @id @default(autoincrement())
  name      String
  subjectId Int
  subject   Subject @relation(fields: [subjectId], references: [id])

  ChapterContent ChapterContent[]
}

model ChapterContent {
  id        Int     @id @default(autoincrement())
  chapterId Int
  chapter   Chapter @relation(fields: [chapterId], references: [id])
  name      String
  type      String
  url       String?
}

model SlotsGroup {
  id         Int          @id @default(autoincrement())
  name       String
  Slots      Slots[]
  ClassGrade ClassGrade[]
}

model Slots {
  id          Int        @id @default(autoincrement())
  slotGroupId Int
  slotGroup   SlotsGroup @relation(fields: [slotGroupId], references: [id])
  slotNumber  Int
  dayOfWeek   String
  startTime   String
  endTime     String
  type        String
}
